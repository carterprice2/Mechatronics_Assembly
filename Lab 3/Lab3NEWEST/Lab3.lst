WARNING: EXTCODE CODE AREA DO NOT CONTAIN RELOCATED ADDRESSES.
THIS WILL BE REMEDIED IN A LATER RELEASE.
--- 0000           ;Lab 3 code
--- 0000           ;L. Carter Price
--- 0000           ;Sara V. 
--- 0000           
--- 0000           
--- 0000           ;Assembler Equates
--- 0000           
 00D6           PORTS        = $00D6              ; output port for LEDs
 00D7           DDRS         = $00D7
 0003           LED_MSK_1    = 0b00000011         ; LED_1 output pins
 0001           R_LED_1      = 0b00000001         ; red LED_1 output pin
 0002           G_LED_1      = 0b00000010		  ; green LED_1 output pin
 000C           LED_MSK_2	 = 0b00001100        
 0004           R_LED_2		 = 0b00000100
 0008           G_LED_2		 = 0b00001000
--- 0000           
--- 0000           ;RAM
                .area bss
                
                
 0800            BACKflag::          .blkb 1                     ;backspace flag  NOT USED YET                                            *
 0801            DPTR::                  .blkb 2                 ;address of next character to be read and displayed
 0803            FIRSTCH::               .blkb 1         ;first character flag                                                            *                            
 0804            DLINE1::                .blkb 1                 ;display line 1 flag                                                             *                                                         
 0805            DLINE2::                .blkb 1                 ;display line 2 flag                                                             *
 0806            L1::                    .blkb 1                 ;initalizes original prompt
 0807            L2::                    .blkb 1                 ;initalizes original prompt
 0808            F1flag::                .blkb 1                 ;indicates the line 1 being written to                           *
 0809            F2flag::                .blkb 1                 ;indicates line 2 being written to                                       *      
 080A            DIGITflag::             .blkb 1                 ;indicates that a digit is to be displayed                       *
 080B            BUFFER::                .blkb 6                 ;stores the entered digit
 0811            POINTER::               .blkb 2                 ;points to address of the next digit in buffer
 0813            COUNT::                 .blkb 1                 ;number of digits enterd                                                         *
 0814            FIRSTdig::              .blkb 1                 ;indicates the first digit on the line                           *
 0815            TEMP::                  .blkb 1                 ;the ascii of whatever was entered in Keypad             *
 0816            COUNT2::                .blkb 1                 ;
 0817            RESULT::                .blkb 2                 ;the BCD of the entered value
 0819            TICKS_1::       .blkb 2                 ;the amount fo time for blink pair 1          
 081B            COUNT_1::       .blkb 2                 ;decrements each time through, controls blink time LED1
 081D            DONE_1::        .blkb 1                 ;communicates when to switch to next step in task LED1 *
 081E            TICKS_2::       .blkb 2                 ;the amount fo time for blink pair 1                             
 0820            COUNT_2::       .blkb 2                 ;decrements each time through, controls blink time LED2
 0822            DONE_2::        .blkb 1                 ;communicates when to switch to next step in task LED2 *
 0823            t1state::       .blkb 1                 ;the state of task 4
 0824            t2state::       .blkb 1                 ;the state of task 5
 0825            t3state::       .blkb 1                 ;the state of task 8
 0826            t4state::       .blkb 1                 ;the state of task 6
 0827            t5state::       .blkb 1                 ;the state fo task 7
 0828            ON_1::                  .blkb 1                 ;indicates if LED pair 1 should be on                              *
 0829            ON_2::                  .blkb 1                 ;indicates if LED pair 2 should be on                              *
 082A            TOOHIGHflag::   .blkb 1                 ;indicates if enter value is too high
 082B            SHOWflag::              .blkb 1                 ;indicates if screen should pause on an error              *
 082C            SHOWCOUNT::             .blkb 2                 ;counts the time to show error
 082E            NODIGflag::             .blkb 1                 ;indicates no digits entered                                               *
 082F            ZEROflag::              .blkb 1                 ;indicates a zero was entered                                              *
 0830            CLINE1flag::    .blkb 1                 ;flags to clear line 1                                                             *
 0831            CLINE2flag::    .blkb 1                 ;flags to clear line 2                                                             *
 0832            COUNTBUFF::             .blkb 1                 ;counter in clear buffer routine                                           
 0833            FIRSTRUN1::     .blkb 1                 ;flag to initialize the keypad                                             
 0834            FIRSTRUN2::             .blkb 1                 ;flag to initialize the display 
 0835            
                .area text
                
                
 C055  180B010806 _main::                        movb   #$01, L1
 C05A  180B010807                                movb   #$01, L2
 C05F  180B010803                                movb   #$01, FIRSTCH
 C064  1803080B0811                              movw   #BUFFER,POINTER          ;moves the contents of BUFFER into POINTER
 C06A                                            
 C06A  180303E8082C                              movw   #$03E8,SHOWCOUNT
 C070  180B060832                                movb   #$06, COUNTBUFF
 C075                                            
 C075  180B010833                                movb   #$01, FIRSTRUN1
 C07A  180B010834                                movb   #$01, FIRSTRUN2
 C07F                                            
 C07F  790823                                    clr    t1state              ; initialize all tasks to state0
 C082  790824                            clr    t2state
 C085  790825                            clr    t3state
 C088  790826                                    clr    t4state
 C08B  790827                                    clr    t5state
 C08E                                            
 C08E  790828                                    clr    ON_1
 C091  790829                                    clr    ON_2
 C094                                            
 C094                                            
 C094                                            
 C094                                            
 C094                            
 C094            		TOP:  
 C094            			 
 C094  16C0AE                              jsr TASK_1                    ;mastermind
 C097  16C2A9                              jsr TASK_2                    ;Keypad Driver
 C09A  16C2C8                              jsr TASK_3                    ;Display Driver
 C09D  16C4E7                              jsr TASK_4                    ;pattern_1
 C0A0  16C570                              jsr TASK_5                    ;count LED pair 1
 C0A3  16C5B7                              jsr TASK_6                    ;pattern_2
 C0A6  16C640                              jsr TASK_7                    ;count LED pair 2
 C0A9  16C687                              jsr TASK_8                    ;delay
 C0AC  20E6                                 bra TOP
 C0AE            
 C0AE            ;===============================================================================
 C0AE            
 C0AE            ;MASTERMIND
 C0AE            
 C0AE  F70806    TASK_1:          tst    L1                              ;test L1
 C0B1  2674                               bne    Prompt1 
 C0B3  F70807                             tst    L2                              ;test L2 
 C0B6  2675                               bne    Prompt2
 C0B8  F7082B                             tst    SHOWflag
 C0BB  262C                               bne    SHOW
 C0BD                                     
 C0BD  F60815                             ldab   TEMP                    ;loads TEMP val from keypad             
 C0C0  C1F1                               cmpb   #$F1                    ;compares accumulator B to see if F1 is pressed
 C0C2  276F                               beq    F1Press
 C0C4  F60815                             ldab   TEMP
 C0C7  C1F2                               cmpb   #$F2                    ;compares acc b to see if F2 pressed
 C0C9  1827008F                           lbeq   F2Press 
 C0CD                                     
 C0CD  F60815                             ldab   TEMP
 C0D0  C10A                               CMPB   #$0A                    ;compares acc b to ent ascii value
 C0D2  182700D9                           LBEQ   ENTERpress      
 C0D6  C108                               CMPB   #$08                    ;compare acc b to BACKSPACE ascii value
 C0D8  18270107                           LBEQ   BACKSPACE       
 C0DC                                            
 C0DC  C130                               CMPB   #$30                    ;compares acc b to 30
 C0DE  182D00FC                           LBLT   ERROR                   ;branch to Loop if less than 30
 C0E2  C139                               CMPB   #$39                    ;compares acc b to 39
 C0E4  182F00DE                           LBLE   DIGITpress              ;branches to digit      
 C0E8  3D                                 rts
 C0E9                                     
 C0E9                                     
 C0E9            SHOW:		 
 C0E9  FC082C                             ldd    SHOWCOUNT
 C0EC  830001                             SUBD   #0001
 C0EF  7C082C                             std    SHOWCOUNT
 C0F2  F7082C                             tst    SHOWCOUNT
 C0F5  2701                               beq    RESETSHOW
 C0F7  3D                                 rts
 C0F8                                     
 C0F8                                     
 C0F8                                     
 C0F8  790815    RESETSHOW:       clr TEMP
 C0FB  79082B                             clr SHOWflag
 C0FE  180305DC082C                       movw #1500, SHOWCOUNT
 C104  F70808                             tst F1flag
 C107  2606                               bne RESETL1
 C109  F70809                             tst F2flag
 C10C  260D                               bne RESETL2
 C10E  3D                                 rts
 C10F                                     
 C10F  180B010806 RESETL1:       movb #$01, L1
 C114  790808                            clr F1flag
 C117  790809                            clr F2flag
 C11A  3D                                rts
 C11B  180B010807 RESETL2:       movb #$01, L2
 C120  790808                            clr F1flag
 C123  790809                            clr F2flag
 C126  3D                                rts
 C127                                     
 C127            Prompt1:
 C127  180B010804                         movb #$01, DLINE1      ;set the Display Line 1 flag
 C12C  3D                                 rts
 C12D            Prompt2:
 C12D  180B010805                         movb #$01, DLINE2              ;set the Display Line 2 flag
 C132  3D                                 rts
 C133                                     
 C133            F1Press:
 C133            			 
 C133  1D00D603                           bclr PORTS, LED_MSK_1  ;turns off LED pair 1
 C137  180B010830                         movb #$01, CLINE1flag
 C13C  180B010808                         movb #$01, F1flag              ;set the f1 flag
 C141  180B010814                         movb #$01, FIRSTdig    ;sets the first digit flag
 C146  790809                             clr F2flag                             ;clears the f2 flag
 C149  790815                             clr TEMP
 C14C  790813                             clr COUNT
 C14F  790828                             clr ON_1
 C152  16C18D                             jsr clrBUFF
 C155  1803080B0811                       movw #BUFFER, POINTER
 C15B  3D                                 rts
 C15C                                     
 C15C            F2Press:	 
 C15C  1D00D60C                           bclr PORTS, LED_MSK_2  ;turns off LED pair 2
 C160  180B010831                         movb #$01, CLINE2flag
 C165  180B010809                         movb #$01, F2flag              ;set the f2 flag
 C16A  180B010814                         movb #$01, FIRSTdig    ;sets first digit flag
 C16F  8648                               ldaa #$48
 C171  16FC43                             jsr SETADDR
 C174  16FC61                             jsr CURSOR
 C177  790808                             clr F1flag                             ;clears the f2 flag
 C17A  790815                             clr TEMP
 C17D  790813                             clr COUNT
 C180  790829                             clr ON_2
 C183  16C18D                             jsr clrBUFF
 C186  1803080B0811                       movw #BUFFER,POINTER
 C18C  3D                                 rts
 C18D                                     
 C18D  1803080B0811 clrBUFF:      movw #BUFFER, POINTER
 C193            
 C193  FE0811            BUFF:    ldx POINTER
 C196  E600                               ldab 0,x
 C198  C7                                 clrb
 C199  6B00                               stab 0,x
 C19B  08                                 inx
 C19C  7E0811                             stx POINTER
 C19F  730832                             dec COUNTBUFF
 C1A2  F70832                             tst COUNTBUFF
 C1A5  2702                               beq BUFFDONE
 C1A7  20EA                               bra BUFF
 C1A9                                     
 C1A9  180B060832        BUFFDONE:        movb #$06, COUNTBUFF
 C1AE  3D                                         rts
 C1AF            ENTERpress:	 
 C1AF  F70814                             tst  FIRSTdig
 C1B2  260C                               bne  NODIG
 C1B4  F70813                             tst  COUNT
 C1B7  2725                               beq ERROR
 C1B9  16C1F4                             jsr BCD
 C1BC  790815                             clr TEMP
 C1BF  3D                                 rts 
 C1C0                                     
 C1C0  180B01082E NODIG:          movb #$01, NODIGflag
 C1C5  3D                                 rts
 C1C6                                     
 C1C6  F70808    DIGITpress:      tst F1flag
 C1C9  2606                               bne PROCEED
 C1CB  F70809                             tst F2flag
 C1CE  2601                               bne PROCEED
 C1D0  3D                                 rts
 C1D1            
 C1D1  180B01080A PROCEED:        movb #$01, DIGITflag
 C1D6  F60813                             ldab   COUNT                   ;places current LCD address in accumulator A
 C1D9  C105                               cmpb   #$05
 C1DB  2702                               beq    MAXdig                  ;clears dig flag so typing stops
 C1DD  3D                                 rts
 C1DE                                     
 C1DE  3D        ERROR:           rts
 C1DF                                     
 C1DF  79080A    MAXdig:          clr DIGITflag
 C1E2  3D                                 rts 
 C1E3                                     
 C1E3  180B010800 BACKSPACE:      movb #$01, BACKflag
 C1E8  F60813                             ldab COUNT
 C1EB  C100                               cmpb #$00
 C1ED  2701                               beq  NOBS
 C1EF  3D                                 rts
 C1F0                                     
 C1F0  790800    NOBS:            clr BACKflag
 C1F3  3D                                 rts
 C1F4                                     
 C1F4            BCD:		;ASCII to BCD converter
 C1F4            				
 C1F4  1803080B0811                              movw  #BUFFER, POINTER
 C1FA  180300000817                              movw #$0000, RESULT
 C200  CD0000                                    ldy      #$0000
 C203  87                                        clra
 C204  C7                                        clrb
 C205                                            
 C205            		LOOP1:	
 C205  CD000A                                    ldy       #$000A
 C208  FC0817                                    ldd       RESULT
 C20B  13                                        emul
 C20C  8D0000                                    cpy       #$0000
 C20F  2621                                      bne  TOOBIG 
 C211  7C0817                                    std RESULT
 C214  FE0811                                    ldx     POINTER
 C217  E600                                      ldab 0,X
 C219  C030                                      subb #$30
 C21B  87                                        clra
 C21C  F30817                                    addd RESULT                       ;add acc d and RESULT
 C21F  2511                                      BCS      TOOBIG
 C221  7C0817                                    std RESULT
 C224  730813                                    dec     COUNT
 C227                                            
 C227  F70813                                    tst COUNT
 C22A  2713                                      beq     DONE1
 C22C                                            
 C22C  08                                        inx
 C22D  7E0811                                    stx     POINTER
 C230  20D3                                      bra LOOP1
 C232                                            
 C232  00        TOOBIG:                 BGND
 C233  180B01082A                                movb #$01, TOOHIGHflag
 C238  3D                                        rts
 C239                                            
 C239  180B01082F ZERO:                  movb #$01, ZEROflag
 C23E  3D                                        rts                     
 C23F                    
 C23F  00        DONE1:                  BGND
 C240  CC0000                                    ldd #$0000
 C243  BC0817                                    cpd     RESULT
 C246  27F1                                      beq ZERO
 C248  F70808                                    tst F1flag
 C24B  2606                                      bne     SET1
 C24D  F70809                                    tst F2flag
 C250  262C                                      bne     SET2
 C252  3D                                        rts
 C253                                            
 C253            SET1:			
 C253  180300000819                              movw #$0000, TICKS_1
 C259  180408170819                              movw RESULT, TICKS_1
 C25F  00                                        BGND
 C260  180B010828                                movb #$01, ON_1
 C265  180300000817                              movw #$0000, RESULT
 C26B  790813                                    clr COUNT
 C26E  18030000081B                              movw #$0000, COUNT_1
 C274  790823                                    clr t1state
 C277  790824                                    clr t2state
 C27A  790825                                    clr t3state
 C27D  3D                                        rts
 C27E                                            
 C27E            SET2:			
 C27E  18030000081E                              movw #$0000, TICKS_2
 C284  18040817081E                              movw RESULT, TICKS_2
 C28A  00                                        BGND
 C28B  180B010829                                movb #$01, ON_2
 C290  180300000817                              movw #$0000, RESULT
 C296  790813                                    clr COUNT
 C299  180300000820                              movw #$0000, COUNT_2
 C29F  790825                                    clr t3state
 C2A2  790826                                    clr t4state
 C2A5  790827                                    clr t5state
 C2A8  3D                                        rts
 C2A9            ;===============================================================================
 C2A9            
 C2A9            ;Keypad Driver
 C2A9            
 C2A9  F70833    TASK_2:           tst FIRSTRUN1
 C2AC  2602                                bne initKEY
 C2AE  200C                                bra startKEY
 C2B0                                     
 C2B0  16FE67            initKEY:  jsr KP_ACTIVE
 C2B3  16FE5C                              jsr INITKEY
 C2B6  16FE71                              jsr FLUSH_BFR
 C2B9  790833                              clr FIRSTRUN1
 C2BC                                      
 C2BC                                      
 C2BC  F70BB1            startKEY: tst   L$KEY_FLG                               ;test key available flag
 C2BF  2606                                bne   SKIP    
 C2C1                                                                    
 C2C1  16FE77                              jsr   GETCHAR
 C2C4  7B0815                              stab  TEMP
 C2C7                                    
 C2C7                                    
 C2C7  3D                SKIP:     rts                                                   ;returns to subroutine
 C2C8            
 C2C8            ;==============================================================================
 C2C8            
 C2C8            ;DISPLAY Task
 C2C8            
 C2C8  F70834    TASK_3:          tst FIRSTRUN2
 C2CB  2602                               bne initDIS
 C2CD  2009                               bra startDIS
 C2CF                                     
 C2CF  16FB00            initDIS: jsr INITLCD
 C2D2  16FC37                             jsr CLRSCREEN
 C2D5  790834                             clr FIRSTRUN2
 C2D8                                     
 C2D8  F70804            startDIS:tst    DLINE1
 C2DB  182600B0                           lbne   initDisplay1      
 C2DF  F70805                             tst    DLINE2
 C2E2  182600BC                           lbne   initDisplay2
 C2E6  F7082A                             tst    TOOHIGHflag
 C2E9  182600C8                           Lbne   HIGHdis
 C2ED  F7082E                             tst    NODIGflag
 C2F0  182600F2                           lbne   NODIGdis
 C2F4  F7082F                             tst    ZEROflag
 C2F7  1826011C                           lbne   ZEROdis
 C2FB  F70808                             tst    F1flag
 C2FE  2606                               bne    TOPtime
 C300  F70809                             tst    F2flag
 C303  261D                               bne    BOTTOMtime
 C305                                     
 C305  3D                                 rts
 C306                                     
 C306            
 C306  F70830    TOPtime:         tst    CLINE1flag
 C309  18260133                           lbne   CLINE1dis
 C30D  F70800                             tst    BACKflag
 C310  264F                               bne    BS
 C312  F7080A                             tst    DIGITflag         ;test Digitflag
 C315  2749                               beq    RETURN
 C317  F70814                             tst    FIRSTdig
 C31A  272B                               beq    Ddigit
 C31C  8608                               ldaa   #$08               ;loads the LCD address for top line number
 C31E  16C33E                             jsr    Ddigit_1st
 C321  3D                                 rts
 C322                                     
 C322  F70831    BOTTOMtime:      tst CLINE2flag
 C325  18260126                           lbne CLINE2dis
 C329  F70800                             tst BACKflag
 C32C  2633                               bne BS
 C32E  F7080A                             tst    DIGITflag         ;test Digitflag
 C331  272D                               beq    RETURN
 C333  F70814                             tst    FIRSTdig
 C336  270F                               beq    Ddigit
 C338  8648                               ldaa   #$48               ;loads the LCD address for top line number
 C33A  16C33E                             jsr    Ddigit_1st
 C33D  3D                                 rts
 C33E            
 C33E            Ddigit_1st:	 
 C33E  16FC43                             jsr SETADDR
 C341  16FC61                             jsr CURSOR
 C344  790814                             clr FIRSTdig
 C347                                    
 C347  F60815    Ddigit:          ldab TEMP
 C34A  16FC25                             jsr OUTCHAR
 C34D  790815                             clr TEMP
 C350  FE0811                             ldx POINTER                                    ;loads acc X with pointer
 C353  6B00                               stab 0,X                                               ;Stores contents of acc B into the location of the address found in acc X which is POINTER
 C355  720813                             inc COUNT
 C358  08                                 INX
 C359  7E0811                             stx POINTER
 C35C  79080A                             clr DIGITflag                                  ;clears the DIGITflag so the program cycles until another digit pressed
 C35F  3D                                 rts
 C360  3D        RETURN:          rts              
 C361                                    
 C361            BS:			 
 C361  16FCFF                             jsr LOAD_ADDR                                  ;load current address in acc A
 C364  8001                               SUBA #$01                                              ;subtract 1 from address
 C366  16FC43                             jsr SETADDR
 C369  16FC61                             jsr CURSOR                                     
 C36C  C620                               ldab #$20                                              ;load space into B
 C36E  16FC25                             jsr  OUTCHAR                           ;prints character in B
 C371  16FCFF                             jsr LOAD_ADDR                                  ;load current address in acc A
 C374  8001                               SUBA #$01      
 C376  16FC43                             jsr SETADDR
 C379  16FC61                             jsr CURSOR     
 C37C  790800                             clr BACKflag                                   ;clear the Backspace flag
 C37F  790815                             clr TEMP
 C382  FE0811                             ldx POINTER                                    ;load POINTER into X
 C385  09                                 dex                                                                            
 C386  6900                               clr 0,X                                                ;clears the value stored at the address in X
 C388  730813                             dec COUNT
 C38B                                     
 C38B  7E0811                             stx POINTER
 C38E  3D                                 rts
 C38F                                      
 C38F            initDisplay1:
 C38F            
 C38F  F70803                             tst    FIRSTCH                 ;test if the first character is true
 C392  182700D1                           lbeq   DCHAR
 C396  8600                               ldaa   #$00               ;loads the LCD address 
 C398  CEC69A                             ldx    #LINE1             ;starting address of string to be displayed
 C39B  16C45E                             jsr    DCHAR_1st
 C39E  182000D3                           lbra   BOTTOM
 C3A2                     
 C3A2            initDisplay2:
 C3A2  F70803                             tst    FIRSTCH                 ;test if the first character is true
 C3A5  182700BE                           lbeq   DCHAR
 C3A9  8640                               ldaa   #$40               ;loads the LCD address 
 C3AB  CEC6BF                             ldx    #LINE2             ;starting address of string to be displayed
 C3AE  16C45E                             jsr    DCHAR_1st
 C3B1  182000C0                           lbra   BOTTOM
 C3B5                                             
 C3B5  F70808    HIGHdis:         tst    F1flag
 C3B8  2606                               bne    HIGH1
 C3BA  F70809                             tst    F2flag
 C3BD  2614                               bne    HIGH2
 C3BF  3D                                 rts
 C3C0                                     
 C3C0  F70803            HIGH1:   tst    FIRSTCH                 ;test if the first character is true
 C3C3  182700A0                           lbeq   DCHAR
 C3C7  8608                               ldaa   #$08               ;loads the LCD address 
 C3C9  CEC6E4                             ldx    #HIGH              ;starting address of string to be displayed
 C3CC  16C45E                             jsr    DCHAR_1st
 C3CF  182000A2                           lbra   BOTTOM
 C3D3                                     
 C3D3  F70803            HIGH2:   tst    FIRSTCH                 ;test if the first character is true
 C3D6  1827008D                           lbeq   DCHAR
 C3DA  8648                               ldaa   #$48               ;loads the LCD address 
 C3DC  CEC6E4                             ldx    #HIGH              ;starting address of string to be displayed
 C3DF  16C45E                             jsr    DCHAR_1st
 C3E2  1820008F                           lbra   BOTTOM
 C3E6                                     
 C3E6                                     
 C3E6  F70808    NODIGdis:        tst    F1flag
 C3E9  18260008                           lbne   NODIG1
 C3ED  F70809                             tst    F2flag
 C3F0  18260014                           lbne   NODIG2
 C3F4  3D                                 rts
 C3F5                                     
 C3F5  F70803            NODIG1:  tst    FIRSTCH                 ;test if the first character is true
 C3F8  1827006B                           lbeq   DCHAR
 C3FC  8608                               ldaa   #$08               ;loads the LCD address 
 C3FE  CEC702                             ldx    #NODIGIT                   ;starting address of string to be displayed
 C401  16C45E                             jsr    DCHAR_1st
 C404  1820006D                           lbra   BOTTOM
 C408                                     
 C408  F70803            NODIG2:  tst    FIRSTCH                 ;test if the first character is true
 C40B  275A                               beq    DCHAR
 C40D  8648                               ldaa   #$48               ;loads the LCD address 
 C40F  CEC702                             ldx    #NODIGIT                   ;starting address of string to be displayed
 C412  16C45E                             jsr    DCHAR_1st
 C415  205E                               bra    BOTTOM
 C417                                     
 C417  F70808    ZEROdis:         tst    F1flag
 C41A  2606                               bne    ZERO1
 C41C  F70809                             tst    F2flag
 C41F  2610                               bne    ZERO2
 C421  3D                                 rts
 C422                                     
 C422  F70803            ZERO1:   tst    FIRSTCH                 ;test if the first character is true
 C425  2740                               beq    DCHAR
 C427  8608                               ldaa   #$08               ;loads the LCD address 
 C429  CEC720                             ldx    #ZEROMAG                ;starting address of string to be displayed
 C42C  16C45E                             jsr    DCHAR_1st
 C42F  2044                               bra    BOTTOM
 C431                                     
 C431  F70803            ZERO2:   tst    FIRSTCH                 ;test if the first character is true
 C434  2731                               beq    DCHAR
 C436  8648                               ldaa   #$48               ;loads the LCD address 
 C438  CEC720                             ldx    #ZEROMAG                ;starting address of string to be displayed
 C43B  16C45E                             jsr    DCHAR_1st
 C43E  2035                               bra    BOTTOM
 C440                                     
 C440  F70803    CLINE1dis:       tst    FIRSTCH                 ;test if the first character is true
 C443  2722                               beq    DCHAR
 C445  8608                               ldaa   #$08               ;loads the LCD address 
 C447  CEC73E                             ldx    #CLINE          ;starting address of string to be displayed
 C44A  16C45E                             jsr    DCHAR_1st
 C44D  2026                               bra    BOTTOM
 C44F                                     
 C44F  F70803    CLINE2dis:   tst        FIRSTCH                 ;test if the first character is true
 C452  2713                               beq    DCHAR
 C454  8648                               ldaa   #$48               ;loads the LCD address 
 C456  CEC73E                             ldx    #CLINE          ;starting address of string to be displayed
 C459  16C45E                             jsr    DCHAR_1st
 C45C  2017                               bra    BOTTOM
 C45E              
 C45E  7E0801    DCHAR_1st:      STX DPTR                   ;store contents of X in DPTR
 C461  16FC43                            jsr SETADDR                ;set the address of of cursor to current location
 C464  790803                            clr FIRSTCH                ;clear variable FIRSTCH
 C467            
 C467                      
 C467            DCHAR:
 C467  FE0801                            ldx DPTR                   ;load x with DPTR
 C46A  E600                              ldab 0,x                   ;load acc b with contents of the address located in X
 C46C  270D                              beq DONE                   
 C46E  16FC25                            jsr OUTCHAR
 C471  08                                inx
 C472  7E0801                            stx DPTR
 C475                                                    
 C475            BOTTOM:		
 C475            			
 C475  F70803                            tst FIRSTCH                ;test if firstchar entered for another string
 C478  2608                              bne DONELINE       ;branch to done 
 C47A  3D                                rts
 C47B                                    
 C47B            DONE:		
 C47B            			
 C47B  180B010803                        movb #$01, FIRSTCH
 C480                                    
 C480  20F3                              bra BOTTOM
 C482                                    
 C482            DONELINE:	
 C482            		
 C482  F70806                            tst L1                    ;test L1 
 C485  261F                              bne CL1                   ;branch to CL1 if not 0
 C487  F70807                            tst L2                    
 C48A  2621                              bne CL2
 C48C  F7082A                            tst TOOHIGHflag
 C48F  2623                              bne CHIGH
 C491  F7082E                            tst NODIGflag
 C494  2627                              bne CNODIG
 C496  F7082F                            tst ZEROflag
 C499  262B                              bne CZERO
 C49B  F70830                            tst CLINE1flag
 C49E  262F                              bne CLRCLINE1
 C4A0  F70831                            tst CLINE2flag
 C4A3  2636                              bne     CLRCLINE2
 C4A5  3D                                rts
 C4A6                                    
 C4A6  790806    CL1:            clr L1
 C4A9  790804                            clr DLINE1
 C4AC  3D                                rts
 C4AD                                    
 C4AD  790807    CL2:            clr L2
 C4B0  790805                            clr DLINE2
 C4B3  3D                                rts
 C4B4                                    
 C4B4  79082A    CHIGH:          clr TOOHIGHflag
 C4B7  180B01082B                        movb #$01, SHOWflag
 C4BC  3D                                rts
 C4BD                                    
 C4BD  79082E    CNODIG:         clr NODIGflag
 C4C0  180B01082B                        movb #$01, SHOWflag
 C4C5  3D                                rts     
 C4C6                                    
 C4C6  79082F    CZERO:          clr ZEROflag
 C4C9  180B01082B                        movb #$01, SHOWflag
 C4CE  3D                                rts     
 C4CF                                                    
 C4CF  790830    CLRCLINE1:      clr CLINE1flag
 C4D2  8608                              ldaa #$08
 C4D4  16FC43                            jsr SETADDR
 C4D7  16FC61                            jsr CURSOR
 C4DA  3D                                rts     
 C4DB                                    
 C4DB  790831    CLRCLINE2:      clr CLINE2flag
 C4DE  8648                              ldaa #$48
 C4E0  16FC43                            jsr SETADDR
 C4E3  16FC61                            jsr CURSOR
 C4E6  3D                                rts                                                     
 C4E7            ;=========================================================================
 C4E7            ;=============================================================================
 C4E7            ;
 C4E7            ;    Subroutine TASK_4            ; pattern_1 for LED pair 1
 C4E7            
 C4E7            TASK_4: 
 C4E7  F70828                    tst ON_1
 C4EA  2601                      bne START1
 C4EC  3D                        rts 
 C4ED            
 C4ED  790808    START1: clr    F1flag
 C4F0  B60823                    ldaa   t1state            ; get current t1state and branch accordingly
 C4F3  2713              beq    t1state0
 C4F5  43                deca
 C4F6  271E              beq    t1state1
 C4F8  43                deca
 C4F9  272A              beq    t1state2
 C4FB  43                deca
 C4FC  2736              beq    t1state3
 C4FE  43                deca
 C4FF  2742              beq    t1state4
 C501  43                deca
 C502  274E              beq    t1state5
 C504  43                deca
 C505  275A              beq    t1state6
 C507  3D                rts                       ; undefined state - do nothing but return
 C508            
 C508            t1state0:                         ; init TASK_1
 C508  1D00D603          bclr   PORTS, LED_MSK_1   ; ensure that LEDs are off when initialized
 C50C  1C00D703          bset   DDRS, LED_MSK_1    ; set LED_MSK_1 pins as PORTS outputs
 C510  180B010823         movb   #$01, t1state      ; set next state
 C515  3D                rts
 C516            
 C516            t1state1:                         ; G, not R
 C516  1C00D602          bset   PORTS, G_LED_1     ; set state1 pattern on LEDs
 C51A  F7081D            tst    DONE_1             ; check TASK_1 done flag
 C51D  2705              beq    exit_t1s1          ; if not done, return
 C51F  180B020823         movb   #$02, t1state      ; if done, set next state
 C524            exit_t1s1:
 C524  3D                rts
 C525            t1state2:                         ; not G, not R
 C525  1D00D602          bclr   PORTS, G_LED_1     ; set state2 pattern on LEDs
 C529  F7081D            tst    DONE_1             ; check TASK_1 done flag
 C52C  2705              beq    exit_t1s2          ; if not done, return
 C52E  180B030823         movb   #$03, t1state      ; if done, set next state
 C533            exit_t1s2:
 C533  3D                rts
 C534            t1state3:                         ; not G, R
 C534  1C00D601          bset   PORTS, R_LED_1     ; set state3 pattern on LEDs
 C538  F7081D            tst    DONE_1             ; check TASK_1 done flag
 C53B                            ;bgnd
 C53B  2705              beq    exit_t1s3          ; if not done, return
 C53D  180B040823         movb   #$04, t1state      ; if done, set next state
 C542            exit_t1s3:
 C542  3D                rts
 C543            t1state4:                         ; not G, not R
 C543  1D00D603          bclr   PORTS, LED_MSK_1   ; set state4 pattern on LEDs
 C547  F7081D            tst    DONE_1             ; check TASK_1 done flag
 C54A  2705              beq    exit_t1s4          ; if not done, return
 C54C  180B050823         movb   #$05, t1state      ; if done, set next state
 C551            exit_t1s4:
 C551  3D                     rts
 C552            t1state5:                         ; G, R
 C552  1C00D603          bset   PORTS, LED_MSK_1   ; set state5 pattern on LEDs
 C556  F7081D            tst    DONE_1             ; check TASK_1 done flag
 C559                            ;bgnd
 C559  2705              beq    exit_t1s5          ; if not done, return
 C55B  180B060823         movb   #$06, t1state      ; if done, set next state
 C560            exit_t1s5:
 C560  3D                rts
 C561            
 C561            t1state6:                         ; not G, not R
 C561  1D00D603          bclr   PORTS, LED_MSK_1   ; set state6 pattern on LEDs
 C565  F7081D            tst    DONE_1             ; check TASK_1 done flag
 C568  2705              beq    exit_t1s6          ; if not done, return
 C56A  180B010823         movb   #$01, t1state      ; if done, set next state
 C56F            exit_t1s6:
 C56F  3D                rts
 C570            
 C570            ; end TASK_4
 C570            ;
 C570            ;=============================================================================
 C570            ;
 C570            ;    Subroutine TASK_5            ; count down LED_1 pair
 C570            
 C570  F70828    TASK_5: tst    ON_1
 C573  2601                      bne        STARTt5
 C575  3D                        rts
 C576                            
 C576  B60824    STARTt5:ldaa   t2state            ; get current t2state and branch accordingly
 C579  2707              beq    t2state0
 C57B  43                deca
 C57C  270D              beq    t2state1
 C57E  43                        deca
 C57F  2720                      beq        t2state2
 C581  3D                rts                       ; undefined state - do nothing but return
 C582            
 C582            t2state0:                         ; initialization for TASK_2
 C582  79081D            clr    DONE_1
 C585  180B010824         movb   #$01, t2state      ; set next state
 C58A  3D                        rts
 C58B            t2state1:                         ; (re)initialize COUNT_1
 C58B  18040819081B         movw   TICKS_1, COUNT_1
 C591  FE081B            ldx    COUNT_1
 C594  09                dex                       ; decrement COUNT_1
 C595  7E081B            stx    COUNT_1            ; store decremented COUNT_1
 C598  79081D            clr    DONE_1
 C59B  180B020824         movb   #$02, t2state      ; set next state
 C5A0  3D                rts
 C5A1            
 C5A1            t2state2:                         ; count down COUNT_1
 C5A1  FE081B            ldx    COUNT_1
 C5A4  2706              beq    setdone_1          ; test to see if COUNT_1 is already zero
 C5A6  09                dex                       ; decrement COUNT_1
 C5A7  7E081B            stx    COUNT_1            ; store decremented COUNT_1
 C5AA  260A              bne    exit_t2s2          ; if not done, return
 C5AC            setdone_1:
 C5AC  180B01081D         movb   #$01, DONE_1       ; if done, set DONE_1 flag
 C5B1  180B010824         movb   #$01, t2state      ; set next state
 C5B6            exit_t2s2:
 C5B6  3D                rts
 C5B7            
 C5B7            ; end TASK_5
 C5B7            ; 
 C5B7            ;=============================================================================
 C5B7            ;    Subroutine TASK_6            ; pattern_2
 C5B7            
 C5B7            TASK_6: 
 C5B7  F70829                    tst ON_2
 C5BA  2601                      bne START2
 C5BC  3D                        rts
 C5BD            
 C5BD  790809    START2: clr    F2flag   
 C5C0  B60826                    ldaa   t4state            ; get current t4state and branch accordingly
 C5C3  2713              beq    t4state0
 C5C5  43                deca
 C5C6  271E              beq    t4state1
 C5C8  43                deca
 C5C9  272A              beq    t4state2
 C5CB  43                deca
 C5CC  2736              beq    t4state3
 C5CE  43                deca
 C5CF  2742              beq    t4state4
 C5D1  43                deca
 C5D2  274E              beq    t4state5
 C5D4  43                deca
 C5D5  275A              beq    t4state6
 C5D7  3D                rts                       ; undefined state - do nothing but return
 C5D8            
 C5D8            t4state0:                         ; init TASK_1
 C5D8  1D00D60C          bclr   PORTS, LED_MSK_2   ; ensure that LEDs are off when initialized
 C5DC  1C00D70C          bset   DDRS, LED_MSK_2    ; set LED_MSK_1 pins as PORTS outputs
 C5E0  180B010826         movb   #$01, t4state      ; set next state
 C5E5  3D                rts
 C5E6            
 C5E6            t4state1:                         ; G, not R
 C5E6  1C00D608          bset   PORTS, G_LED_2     ; set state1 pattern on LEDs
 C5EA  F70822            tst    DONE_2             ; check TASK_1 done flag
 C5ED  2705              beq    exit_t4s1          ; if not done, return
 C5EF  180B020826         movb   #$02, t4state      ; if done, set next state
 C5F4            exit_t4s1:
 C5F4  3D                rts
 C5F5            t4state2:                         ; not G, not R
 C5F5  1D00D608          bclr   PORTS, G_LED_2     ; set state2 pattern on LEDs
 C5F9  F70822            tst    DONE_2             ; check TASK_1 done flag
 C5FC  2705              beq    exit_t4s2          ; if not done, return
 C5FE  180B030826         movb   #$03, t4state      ; if done, set next state
 C603            exit_t4s2:
 C603  3D                rts
 C604            t4state3:                         ; not G, R
 C604  1C00D604          bset   PORTS, R_LED_2     ; set state3 pattern on LEDs
 C608  F70822            tst    DONE_2             ; check TASK_1 done flag
 C60B                            ;bgnd
 C60B  2705              beq    exit_t4s3          ; if not done, return
 C60D  180B040826         movb   #$04, t4state      ; if done, set next state
 C612            exit_t4s3:
 C612  3D                rts
 C613            t4state4:                         ; not G, not R
 C613  1D00D60C          bclr   PORTS, LED_MSK_2   ; set state4 pattern on LEDs
 C617  F70822            tst    DONE_2             ; check TASK_1 done flag
 C61A  2705              beq    exit_t4s4          ; if not done, return
 C61C  180B050826         movb   #$05, t4state      ; if done, set next state
 C621            exit_t4s4:
 C621  3D                     rts
 C622            t4state5:                         ; G, R
 C622  1C00D60C          bset   PORTS, LED_MSK_2   ; set state5 pattern on LEDs
 C626  F70822            tst    DONE_2             ; check TASK_1 done flag
 C629                            ;bgnd
 C629  2705              beq    exit_t4s5          ; if not done, return
 C62B  180B060826         movb   #$06, t4state      ; if done, set next state
 C630            exit_t4s5:
 C630  3D                rts
 C631            
 C631            t4state6:                         ; not G, not R
 C631  1D00D60C          bclr   PORTS, LED_MSK_2   ; set state6 pattern on LEDs
 C635  F70822            tst    DONE_2             ; check TASK_1 done flag
 C638  2705              beq    exit_t4s6          ; if not done, return
 C63A  180B010826         movb   #$01, t4state      ; if done, set next state
 C63F            exit_t4s6:
 C63F  3D                rts
 C640            
 C640            ; end TASK_6
 C640            ;
 C640            ;=============================================================================
 C640            ;
 C640            ;    Subroutine TASK_7            ; count down LED_2 pair
 C640            
 C640  F70829    TASK_7: tst     ON_2
 C643  2601                      bne             STARTt7
 C645  3D                        rts
 C646                            
 C646  B60827    STARTt7:ldaa   t5state            ; get current t5state and branch accordingly
 C649  2707              beq    t5state0
 C64B  43                deca
 C64C  270D              beq    t5state1
 C64E  43                        deca
 C64F  2720                      beq        t5state2
 C651  3D                rts                       ; undefined state - do nothing but return
 C652            
 C652            t5state0:                         ; initialization for TASK_2
 C652  790822            clr    DONE_2
 C655  180B010827         movb   #$01, t5state      ; set next state
 C65A  3D                        rts
 C65B            t5state1:                         ; (re)initialize COUNT_2
 C65B  1804081E0820         movw   TICKS_2, COUNT_2
 C661  FE0820            ldx    COUNT_2
 C664  09                dex                       ; decrement COUNT_2
 C665  7E0820            stx    COUNT_2            ; store decremented COUNT_2
 C668  790822            clr    DONE_2
 C66B  180B020827         movb   #$02, t5state      ; set next state
 C670  3D                rts
 C671            
 C671            t5state2:                         ; count down COUNT_2
 C671  FE0820            ldx    COUNT_2
 C674  2706              beq    setdone_2          ; test to see if COUNT_2 is already zero
 C676  09                dex                       ; decrement COUNT_2
 C677  7E0820            stx    COUNT_2            ; store decremented COUNT_2
 C67A  260A              bne    exit_t5s2          ; if not done, return
 C67C            setdone_2:
 C67C  180B010822         movb   #$01, DONE_2       ; if done, set DONE_2 flag
 C681  180B010827         movb   #$01, t5state      ; set next state
 C686            exit_t5s2:
 C686  3D                rts
 C687            
 C687            ; end TASK_7
 C687            ; 
 C687            
 C687            
 C687            ;=============================================================================
 C687            ;
 C687            ;    Subroutine TASK_8            ; delay 1.00ms
 C687            
 C687  B60825    TASK_8: ldaa   t3state            ; get current t3state and branch accordingly
 C68A  2704              beq    t3state0
 C68C  43                deca
 C68D  2707              beq    t3state1
 C68F  3D                rts                       ; undefined state - do nothing but return
 C690            
 C690            t3state0:                         ; initialization for TASK_3
 C690                                              ; no initialization required
 C690  180B010825         movb   #$01, t3state      ; set next state
 C695  3D                rts
 C696            
 C696            t3state1:
 C696  16C744            jsr    DELAY_1ms
 C699  3D                rts
 C69A            
 C69A            ; end TASK_8
 C69A            ;
 C69A            
 C69A            ;============================================================================    
 C69A                     
 0645 54494D4520313D20202020202020204C454420504149522031203C50726573732046313E LINE1:                   .ascii   'TIME 1=        LED PAIR 1 <Press F1>'
 C6BE  00                                        .byte    $00 
 C6BF                                            
 066A 54494D4520323D20202020202020204C454420504149522032203C50726573732046323E LINE2:                   .ascii   'TIME 2=        LED PAIR 2 <Press F2>'
 C6E3  00                                        .byte    $00 
 C6E4            
 C6E4  2020204D41474E495455444520544F4F204C4152474520202020202020 HIGH:                  .ascii   '   MAGNITUDE TOO LARGE       '
 C701  00                                        .byte    $00                    
 C702                                            
 C702  2020204E4F204449474954532020202020202020202020202020202020 NODIGIT:               .ascii   '   NO DIGITS                 '
 C71F  00                                        .byte    $00                            
 C720                                            
 C720  5A45524F204D41474E495455444520494E415050524F50524941544520 ZEROMAG:               .ascii   'ZERO MAGNITUDE INAPPROPRIATE '
 C73D  00                                        .byte    $00                                                    
 C73E                                            
 C73E  2020202020 CLINE:             .ascii       '     '
 C743  00                                        .byte    $00                                                                                                                    
 C744            ;=============================================================================
 C744            ;
 C744            ;    Subroutine Delay_1ms delays for ~1.00ms
 C744            ;
 C744            DELAY_1ms:
 C744  CD0262            ldy    #$0262
 C747            INNER:                            ; inside loop
 C747  8D0000            cpy    #0
 C74A  2703              beq    EXIT
 C74C  03                dey
 C74D  20F8              bra    INNER
 C74F            EXIT:
 C74F  3D                rts                       ; exit DELAY_1ms
 C750            
 C750            ; end subroutine DELAY_1ms
 C750            ;
 C750            ;==============================================================================
 C750            
 C750                      
 C750            ;============================================================================
 C750                    
                .area interrupt_vectors (abs)
                          .org                          $FFFE
 FFFE  C000                .word                         __start
