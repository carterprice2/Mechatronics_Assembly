 0000           ;Assembler equates
 0000           
 00D6           PORTS        = $00D6              ; output port for LEDs
 00D7           DDRS         = $00D7
 0003           LED_MSK_1    = 0b00000011         ; LED_1 output pins
 0001           R_LED_1      = 0b00000001         ; red LED_1 output pin
 0002           G_LED_1      = 0b00000010		  ; green LED_1 output pin
 000C           LED_MSK_2	 = 0b00001100        
 0004           R_LED_2		 = 0b00000100
 0008           G_LED_2		 = 0b00001000
 0000           
 0000           ; RAM area
                .area bss
 0000           TICKS_1::    .blkb 2              ; use this space to explain each of your variables
 0002           COUNT_1::    .blkb 2
 0004           DONE_1::     .blkb 1
 0005           TICKS_2::    .blkb 2
 0007           COUNT_2::    .blkb 2
 0009           DONE_2::     .blkb 1
 000A           t1state::    .blkb 1
 000B           t2state::    .blkb 1
 000C           t3state::    .blkb 1
 000D           t4state::    .blkb 1
 000E           t5state::    .blkb 1
 000F           
 000F           ;code area
                .area text
                ;
                ;==============================================================================
                ;
                ;   main program
                
 0000           _main::
 0000           
 0000 79000A            clr    t1state            ; initialize all tasks to state0
 0003 79000B            clr    t2state
 0006 79000C            clr    t3state
 0009           
 0009           ;  Normally no code other than that to clear the state variables and call the tasks
 0009           ;  repeatedly should be in your main program.  However, this week we will make an 
 0009           ;  exception.  The following code will allow the user to set TICKS_1 and TICKS_2 in
 0009           ;  the debugger.
 0009           
 0009 180300C80000         movw   #200, TICKS_1      ; set default for TICKS_1
 000F 180301F40005         movw   #500, TICKS_2      ; set default for TICKS_2
 0015 00                bgnd                      ; stop in DEBUGGER to allow user to alter TICKS
 0016           
 0016           TOP:    ;bgnd
 0016 160027                    jsr    TASK_1
 0019                           ;bgnd
 0019 1600A7            jsr    TASK_2
 001C                           ;bgnd
 001C 1601A5            jsr    TASK_3
 001F                           ;bgnd
 001F 1600E6                    jsr        TASK_4
 0022 160166                    jsr        TASK_5
 0025 20EF              bra    TOP
 0027           
 0027           ; end main
 0027            
 0027           ;=============================================================================
 0027           ;
 0027           ;    Subroutine TASK_1            ; pattern_1
 0027           
 0027 B6000A    TASK_1: ldaa   t1state            ; get current t1state and branch accordingly
 002A 2713              beq    t1state0
 002C 43                deca
 002D 271E              beq    t1state1
 002F 43                deca
 0030 272A              beq    t1state2
 0032 43                deca
 0033 2736              beq    t1state3
 0035 43                deca
 0036 2742              beq    t1state4
 0038 43                deca
 0039 274E              beq    t1state5
 003B 43                deca
 003C 275A              beq    t1state6
 003E 3D                rts                       ; undefined state - do nothing but return
 003F           
 003F           t1state0:                         ; init TASK_1
 003F 1D00D603          bclr   PORTS, LED_MSK_1   ; ensure that LEDs are off when initialized
 0043 1C00D703          bset   DDRS, LED_MSK_1    ; set LED_MSK_1 pins as PORTS outputs
 0047 180B01000A         movb   #$01, t1state      ; set next state
 004C 3D                rts
 004D           
 004D           t1state1:                         ; G, not R
 004D 1C00D602          bset   PORTS, G_LED_1     ; set state1 pattern on LEDs
 0051 F70004            tst    DONE_1             ; check TASK_1 done flag
 0054 2705              beq    exit_t1s1          ; if not done, return
 0056 180B02000A         movb   #$02, t1state      ; if done, set next state
 005B           exit_t1s1:
 005B 3D                rts
 005C           t1state2:                         ; not G, not R
 005C 1D00D602          bclr   PORTS, G_LED_1     ; set state2 pattern on LEDs
 0060 F70004            tst    DONE_1             ; check TASK_1 done flag
 0063 2705              beq    exit_t1s2          ; if not done, return
 0065 180B03000A         movb   #$03, t1state      ; if done, set next state
 006A           exit_t1s2:
 006A 3D                rts
 006B           t1state3:                         ; not G, R
 006B 1C00D601          bset   PORTS, R_LED_1     ; set state3 pattern on LEDs
 006F F70004            tst    DONE_1             ; check TASK_1 done flag
 0072                           ;bgnd
 0072 2705              beq    exit_t1s3          ; if not done, return
 0074 180B04000A         movb   #$04, t1state      ; if done, set next state
 0079           exit_t1s3:
 0079 3D                rts
 007A           t1state4:                         ; not G, not R
 007A 1D00D603          bclr   PORTS, LED_MSK_1   ; set state4 pattern on LEDs
 007E F70004            tst    DONE_1             ; check TASK_1 done flag
 0081 2705              beq    exit_t1s4          ; if not done, return
 0083 180B05000A         movb   #$05, t1state      ; if done, set next state
 0088           exit_t1s4:
 0088 3D                     rts
 0089           t1state5:                         ; G, R
 0089 1C00D603          bset   PORTS, LED_MSK_1   ; set state5 pattern on LEDs
 008D F70004            tst    DONE_1             ; check TASK_1 done flag
 0090                           ;bgnd
 0090 2705              beq    exit_t1s5          ; if not done, return
 0092 180B06000A         movb   #$06, t1state      ; if done, set next state
 0097           exit_t1s5:
 0097 3D                rts
 0098           
 0098           t1state6:                         ; not G, not R
 0098 1D00D603          bclr   PORTS, LED_MSK_1   ; set state6 pattern on LEDs
 009C F70004            tst    DONE_1             ; check TASK_1 done flag
 009F 2705              beq    exit_t1s6          ; if not done, return
 00A1 180B01000A         movb   #$01, t1state      ; if done, set next state
 00A6           exit_t1s6:
 00A6 3D                rts
 00A7           
 00A7           ; end TASK_1
 00A7           ;
 00A7           ;=============================================================================
 00A7           ;
 00A7           ;    Subroutine TASK_2            ; count down LED_1 pair
 00A7           
 00A7 B6000B    TASK_2: ldaa   t2state            ; get current t2state and branch accordingly
 00AA 2707              beq    t2state0
 00AC 43                deca
 00AD 270C              beq    t2state1
 00AF 43                        deca
 00B0 271E                      beq        t2state2
 00B2 3D                rts                       ; undefined state - do nothing but return
 00B3           
 00B3           t2state0:                         ; initialization for TASK_2
 00B3 790004            clr    DONE_1
 00B6 180B01000B         movb   #$01, t2state      ; set next state
 00BB           
 00BB           t2state1:                         ; (re)initialize COUNT_1
 00BB 180400000002         movw   TICKS_1, COUNT_1
 00C1 FE0002            ldx    COUNT_1
 00C4 09                dex                       ; decrement COUNT_1
 00C5 7E0002            stx    COUNT_1            ; store decremented COUNT_1
 00C8 790004            clr    DONE_1
 00CB 180B02000B         movb   #$02, t2state      ; set next state
 00D0                   ;rts
 00D0           
 00D0           t2state2:                         ; count down COUNT_1
 00D0 FE0002            ldx    COUNT_1
 00D3 2706              beq    setdone_1          ; test to see if COUNT_1 is already zero
 00D5 09                dex                       ; decrement COUNT_1
 00D6 7E0002            stx    COUNT_1            ; store decremented COUNT_1
 00D9 260A              bne    exit_t2s2          ; if not done, return
 00DB           setdone_1:
 00DB 180B010004         movb   #$01, DONE_1       ; if done, set DONE_1 flag
 00E0 180B01000B         movb   #$01, t2state      ; set next state
 00E5           exit_t2s2:
 00E5 3D                rts
 00E6           
 00E6           ; end TASK_2
 00E6           ; 
 00E6           ;=============================================================================
 00E6           ;    Subroutine TASK_4            ; pattern_2
 00E6           
 00E6 B6000D    TASK_4: ldaa   t4state            ; get current t4state and branch accordingly
 00E9 2713              beq    t4state0
 00EB 43                deca
 00EC 271E              beq    t4state1
 00EE 43                deca
 00EF 272A              beq    t4state2
 00F1 43                deca
 00F2 2736              beq    t4state3
 00F4 43                deca
 00F5 2742              beq    t4state4
 00F7 43                deca
 00F8 274E              beq    t4state5
 00FA 43                deca
 00FB 275A              beq    t4state6
 00FD 3D                rts                       ; undefined state - do nothing but return
 00FE           
 00FE           t4state0:                         ; init TASK_1
 00FE 1D00D60C          bclr   PORTS, LED_MSK_2   ; ensure that LEDs are off when initialized
 0102 1C00D70C          bset   DDRS, LED_MSK_2    ; set LED_MSK_1 pins as PORTS outputs
 0106 180B01000D         movb   #$01, t4state      ; set next state
 010B 3D                rts
 010C           
 010C           t4state1:                         ; G, not R
 010C 1C00D608          bset   PORTS, G_LED_2     ; set state1 pattern on LEDs
 0110 F70009            tst    DONE_2             ; check TASK_1 done flag
 0113 2705              beq    exit_t4s1          ; if not done, return
 0115 180B02000D         movb   #$02, t4state      ; if done, set next state
 011A           exit_t4s1:
 011A 3D                rts
 011B           t4state2:                         ; not G, not R
 011B 1D00D608          bclr   PORTS, G_LED_2     ; set state2 pattern on LEDs
 011F F70009            tst    DONE_2             ; check TASK_1 done flag
 0122 2705              beq    exit_t4s2          ; if not done, return
 0124 180B03000D         movb   #$03, t4state      ; if done, set next state
 0129           exit_t4s2:
 0129 3D                rts
 012A           t4state3:                         ; not G, R
 012A 1C00D604          bset   PORTS, R_LED_2     ; set state3 pattern on LEDs
 012E F70009            tst    DONE_2             ; check TASK_1 done flag
 0131                           ;bgnd
 0131 2705              beq    exit_t4s3          ; if not done, return
 0133 180B04000D         movb   #$04, t4state      ; if done, set next state
 0138           exit_t4s3:
 0138 3D                rts
 0139           t4state4:                         ; not G, not R
 0139 1D00D60C          bclr   PORTS, LED_MSK_2   ; set state4 pattern on LEDs
 013D F70009            tst    DONE_2             ; check TASK_1 done flag
 0140 2705              beq    exit_t4s4          ; if not done, return
 0142 180B05000D         movb   #$05, t4state      ; if done, set next state
 0147           exit_t4s4:
 0147 3D                     rts
 0148           t4state5:                         ; G, R
 0148 1C00D60C          bset   PORTS, LED_MSK_2   ; set state5 pattern on LEDs
 014C F70009            tst    DONE_2             ; check TASK_1 done flag
 014F                           ;bgnd
 014F 2705              beq    exit_t4s5          ; if not done, return
 0151 180B06000D         movb   #$06, t4state      ; if done, set next state
 0156           exit_t4s5:
 0156 3D                rts
 0157           
 0157           t4state6:                         ; not G, not R
 0157 1D00D60C          bclr   PORTS, LED_MSK_2   ; set state6 pattern on LEDs
 015B F70009            tst    DONE_2             ; check TASK_1 done flag
 015E 2705              beq    exit_t4s6          ; if not done, return
 0160 180B01000D         movb   #$01, t4state      ; if done, set next state
 0165           exit_t4s6:
 0165 3D                rts
 0166           
 0166           ; end TASK_4
 0166           ;
 0166           ;=============================================================================
 0166           ;
 0166           ;    Subroutine TASK_5            ; count down LED_2 pair
 0166           
 0166 B6000E    TASK_5: ldaa   t5state            ; get current t5state and branch accordingly
 0169 2707              beq    t5state0
 016B 43                deca
 016C 270C              beq    t5state1
 016E 43                        deca
 016F 271E                      beq        t5state2
 0171 3D                rts                       ; undefined state - do nothing but return
 0172           
 0172           t5state0:                         ; initialization for TASK_2
 0172 790009            clr    DONE_2
 0175 180B01000E         movb   #$01, t5state      ; set next state
 017A           
 017A           t5state1:                         ; (re)initialize COUNT_2
 017A 180400050007         movw   TICKS_2, COUNT_2
 0180 FE0007            ldx    COUNT_2
 0183 09                dex                       ; decrement COUNT_2
 0184 7E0007            stx    COUNT_2            ; store decremented COUNT_2
 0187 790009            clr    DONE_2
 018A 180B02000E         movb   #$02, t5state      ; set next state
 018F                   ;rts
 018F           
 018F           t5state2:                         ; count down COUNT_2
 018F FE0007            ldx    COUNT_2
 0192 2706              beq    setdone_2          ; test to see if COUNT_2 is already zero
 0194 09                dex                       ; decrement COUNT_2
 0195 7E0007            stx    COUNT_2            ; store decremented COUNT_2
 0198 260A              bne    exit_t5s2          ; if not done, return
 019A           setdone_2:
 019A 180B010009         movb   #$01, DONE_2       ; if done, set DONE_2 flag
 019F 180B01000E         movb   #$01, t5state      ; set next state
 01A4           exit_t5s2:
 01A4 3D                rts
 01A5           
 01A5           ; end TASK_2
 01A5           ; 
 01A5           
 01A5           
 01A5           ;=============================================================================
 01A5           ;
 01A5           ;    Subroutine TASK_3            ; delay 1.00ms
 01A5           
 01A5 B6000C    TASK_3: ldaa   t3state            ; get current t3state and branch accordingly
 01A8 2704              beq    t3state0
 01AA 43                deca
 01AB 2707              beq    t3state1
 01AD 3D                rts                       ; undefined state - do nothing but return
 01AE           
 01AE           t3state0:                         ; initialization for TASK_3
 01AE                                             ; no initialization required
 01AE 180B01000C         movb   #$01, t3state      ; set next state
 01B3 3D                rts
 01B4           
 01B4           t3state1:
 01B4 1601B8            jsr    DELAY_1ms
 01B7 3D                rts
 01B8           
 01B8           ; end TASK_3
 01B8           ;
 01B8           ;=============================================================================
 01B8           ;
 01B8           ;    Subroutine Delay_1ms delays for ~1.00ms
 01B8           ;
 01B8           DELAY_1ms:
 01B8 CD0262            ldy    #$0262
 01BB           INNER:                            ; inside loop
 01BB 8D0000            cpy    #0
 01BE 2703              beq    EXIT
 01C0 03                dey
 01C1 20F8              bra    INNER
 01C3           EXIT:
 01C3 3D                rts                       ; exit DELAY_1ms
 01C4           
 01C4           ; end subroutine DELAY_1ms
 01C4           ;
 01C4           ;==============================================================================
 01C4           
 01C4           
                .area interrupt_vectors (abs)
                        .org    $FFFE             ; at reset vector location
 FFFE 0000              .word   __start           ; load starting address
 10000           
